import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:path_drawing/path_drawing.dart';
import 'package:roambot/screens/landing_screen.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  bool showFullLogo = false;
  bool showVector = true;

  @override
  void initState() {
    super.initState();

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
    )..addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        setState(() {
          showVector = false; // Hide vector path after drawing
          showFullLogo = true; // Show logo
        });
      }
    });

    _controller.forward();

    Future.delayed(const Duration(seconds: 5), () {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (_) => const LandingScreen()),
      );
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.teal,
      body: Center(
        child: SizedBox(
          width: 300,
          height: 269,
          child: Stack(
            alignment: Alignment.center,
            children: [
              // Show shimmer path only while drawing
              if (showVector)
                AnimatedBuilder(
                  animation: _controller,
                  builder: (context, child) {
                    return ShaderMask(
                      shaderCallback: (bounds) {
                        return LinearGradient(
                          colors: [
                            Colors.white,
                            Colors.tealAccent,
                            Colors.white,
                          ],
                          stops: [
                            (_controller.value - 0.3).clamp(0.0, 1.0),
                            _controller.value,
                            (_controller.value + 0.3).clamp(0.0, 1.0),
                          ],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ).createShader(bounds);
                      },
                      child: CustomPaint(
                        size: const Size(200, 200),
                        painter: RoambotLogoPainter(_controller),
                      ),
                      blendMode: BlendMode.srcIn,
                    );
                  },
                ),

              // Fade-in original full-color logo
              AnimatedOpacity(
                opacity: showFullLogo ? 1.0 : 0.0,
                duration: const Duration(milliseconds: 600),
                child: Image.asset(
                  'assets/roambot_splash.png',
                  width: 400,
                  height: 270,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class RoambotLogoPainter extends CustomPainter {
  final Animation<double> animation;

  RoambotLogoPainter(this.animation) : super(repaint: animation);

  final String _svgPathData = """
 M0 0 C0.75506836 0.20286621 1.51013672 0.40573242 2.28808594 0.61474609 C6.63024359 1.83540432 10.80861831 3.3405163 15 5 C15.65548828 5.24975586 16.31097656 5.49951172 16.98632812 5.75683594 C32.69483948 11.74836431 47.21489659 19.37721481 61 29 C62.09957031 29.69480469 63.19914062 30.38960937 64.33203125 31.10546875 C65.21246094 31.73066406 66.09289062 32.35585937 67 33 C67 33.66 67 34.32 67 35 C67.56976563 35.25265625 68.13953125 35.5053125 68.7265625 35.765625 C73.42921626 38.31895591 77.13943155 42.33766042 81 46 C81.55606934 46.5273877 82.11213867 47.05477539 82.68505859 47.59814453 C90.61124635 55.1777124 97.85823445 62.86823089 104 72 C104.46116211 72.67627441 104.92232422 73.35254883 105.39746094 74.04931641 C123.08926714 100.21868622 135.83192833 131.77839373 136.2734375 163.73828125 C136.28592026 164.56845764 136.29840302 165.39863403 136.31126404 166.25396729 C136.54347392 185.4230548 136.04250204 203.37065819 131 222 C130.79713379 222.77472656 130.59426758 223.54945313 130.38525391 224.34765625 C123.17586447 251.28198336 109.48557541 275.49162673 92 297 C91.39671875 297.74894531 90.7934375 298.49789063 90.171875 299.26953125 C87.06832103 303.01829775 83.76301851 305.9575595 80 309 C78.32364768 310.6569244 76.65805993 312.32477081 75 314 C59.72006117 329.23181304 41.77368856 339.64885297 22 348 C24.0316693 351.67114927 26.22241023 354.41723496 29.25 357.3125 C32.81121119 360.78713393 36.12918153 364.36339357 39.359375 368.14453125 C40.98009509 369.97748849 42.67738411 371.67657041 44.4375 373.375 C47 376 47 376 47 378 C47.99 378.33 48.98 378.66 50 379 C51.4375 380.42578125 51.4375 380.42578125 53 382.3125 C60.66907479 391.34247533 68.85414753 399.92405021 76.94750977 408.57250977 C80.88236588 412.78383718 84.75394767 417.04546381 88.59375 421.34375 C91.6922074 424.76412506 94.84541897 428.13144303 98 431.5 C103.40084999 437.274882 108.78185707 443.05845464 114 449 C115.27810547 450.40765625 115.27810547 450.40765625 116.58203125 451.84375 C117.42121094 452.8028125 118.26039063 453.761875 119.125 454.75 C119.89070313 455.61109375 120.65640625 456.4721875 121.4453125 457.359375 C123 460 123 460 123.0546875 463.140625 C122 466 122 466 119.80859375 467.83203125 C110.94445078 471.51823257 99.46688554 470.2180432 90 470 C88.71029297 469.97317139 88.71029297 469.97317139 87.39453125 469.94580078 C59.14830668 469.27860548 38.88414308 464.39292488 18.53515625 443.671875 C15.80412594 440.79356262 13.18494832 437.84522517 10.609375 434.828125 C8.97413566 432.97062012 7.26518207 431.23393991 5.5 429.5 C-4.01882187 420.11010122 -4.01882187 420.11010122 -6.01171875 415.82421875 C-6.92301278 413.64593724 -6.92301278 413.64593724 -10 413 C-11.7890625 411.2578125 -11.7890625 411.2578125 -13.625 409.125 C-14.54152344 408.07699219 -14.54152344 408.07699219 -15.4765625 407.0078125 C-17 405 -17 405 -18 402 C-18.99 401.67 -19.98 401.34 -21 401 C-22.40234375 399.609375 -22.40234375 399.609375 -23.9375 397.75 C-27.10316262 394.01904049 -30.36105378 390.39923488 -33.6875 386.8125 C-34.4448645 385.9925354 -34.4448645 385.9925354 -35.2175293 385.15600586 C-37.94515499 382.20552516 -40.68599675 379.26830345 -43.44140625 376.34375 C-43.99546143 375.75231201 -44.5495166 375.16087402 -45.12036133 374.55151367 C-46.19029087 373.40977463 -47.26423243 372.27177944 -48.3425293 371.13793945 C-52 367.22505364 -52 367.22505364 -52 365 C-52.99 364.67 -53.98 364.34 -55 364 C-56.5078125 362.50390625 -56.5078125 362.50390625 -58.125 360.5625 C-58.74375 359.83417969 -59.3625 359.10585938 -60 358.35546875 C-60.66 357.57816406 -61.32 356.80085938 -62 356 C-67.12022036 350.2097508 -72.35558165 344.52906936 -77.625 338.875 C-81.58711843 334.62299809 -85.51235961 330.35400468 -89.30078125 325.9453125 C-92.22228759 322.60069145 -95.25797396 319.35784444 -98.27734375 316.1015625 C-100 314 -100 314 -100 312 C-101.32 311.34 -102.64 310.68 -104 310 C-104 309.34 -104 308.68 -104 308 C-104.66 308 -105.32 308 -106 308 C-107.76171875 306.171875 -107.76171875 306.171875 -109.6875 303.75 C-110.33074219 302.96109375 -110.97398437 302.1721875 -111.63671875 301.359375 C-113 299 -113 299 -112.76953125 296.765625 C-112 295 -112 295 -111 294 C-108.53955973 293.89087443 -106.1061646 293.84577627 -103.64477539 293.84228516 C-102.87374985 293.83720444 -102.1027243 293.83212372 -101.30833435 293.82688904 C-99.62502761 293.81615438 -97.94170631 293.80754646 -96.25837898 293.80076981 C-93.57748675 293.78897375 -90.89675512 293.76950896 -88.21592712 293.74765015 C-80.58972709 293.68613038 -72.96353526 293.63241033 -65.3371582 293.59863281 C-60.67388372 293.57742356 -56.01088878 293.54189556 -51.34777641 293.49787521 C-49.58476546 293.48389461 -47.82170489 293.47503429 -46.05864143 293.47182083 C-30.78032328 293.44108397 -15.40022984 292.43718917 -1.0625 286.6875 C0.12375977 286.22911743 0.12375977 286.22911743 1.33398438 285.76147461 C28.42379975 275.05277503 50.30437577 253.64645217 62.25 227.125 C75.63417396 196.22391623 75.68585071 164.4526554 63.7578125 133.16796875 C58.96958903 121.3796608 51.99118431 110.84549227 44 101 C43.39285156 100.25105469 42.78570312 99.50210938 42.16015625 98.73046875 C38.16647472 93.99419791 33.80793599 89.89921957 29 86 C28.12601562 85.2884375 27.25203125 84.576875 26.3515625 83.84375 C1.50712511 64.39448534 -31.40994334 55.28148877 -62.71533203 58.77099609 C-86.56208179 61.73599242 -107.06376996 70.48758505 -126.21484375 84.96875 C-129 87 -129 87 -131.31640625 88.09375 C-133.36331188 88.94749323 -133.36331188 88.94749323 -134 92 C-135.98260426 93.68732277 -137.9832342 95.35366057 -140 97 C-140.66 97.99 -141.32 98.98 -142 100 C-142.66 100 -143.32 100 -144 100 C-144.25523437 100.56203125 -144.51046875 101.1240625 -144.7734375 101.703125 C-146.15690623 104.29382441 -147.81929191 106.43351393 -149.625 108.75 C-160.25616498 123.29081442 -167.01917195 140.63746162 -169.64193726 158.420578 C-169.83356998 159.71962595 -169.83356998 159.71962595 -170.02907407 161.04491729 C-171.24746696 169.8829825 -171.4348566 178.61298472 -171.41650391 187.52075195 C-171.42391293 189.26961844 -171.43262667 191.01847979 -171.44252014 192.76733398 C-171.46553809 197.45145668 -171.47097558 202.13544624 -171.47317934 206.81961846 C-171.478914 211.76692989 -171.5022401 216.71415932 -171.52377319 221.66142273 C-171.56209429 231.02565966 -171.586433 240.38987261 -171.60489786 249.75416774 C-171.63837958 266.48763393 -171.69667469 283.22102546 -171.75888956 299.95440644 C-171.78009951 305.80448502 -171.79537176 311.65454056 -171.80588233 317.50464767 C-171.86741366 350.0507517 -171.86741366 350.0507517 -172.37255859 363.54760742 C-172.40051828 364.41748197 -172.42847797 365.28735651 -172.45728493 366.18359089 C-172.81880882 373.99823254 -174.81599995 380.83145132 -178 388 C-178.34804687 388.80953125 -178.69609375 389.6190625 -179.0546875 390.453125 C-187.12079333 406.8208434 -203.99243471 421.91915492 -220.8125 428.4375 C-224.64771839 429.72872682 -227.91582278 430.44153267 -232 430 C-233.69158921 427.04272175 -234.2502536 424.92802161 -234.25168228 421.5316 C-234.25689778 420.63663702 -234.26211327 419.74167405 -234.26748681 418.81959099 C-234.26302537 417.84033797 -234.25856392 416.86108495 -234.25396729 415.85215759 C-234.25708727 414.80858913 -234.26020725 413.76502068 -234.26342177 412.68982893 C-234.27142018 409.18110185 -234.26507058 405.67254684 -234.25878906 402.16381836 C-234.26149835 399.65221556 -234.26505893 397.14061355 -234.26940918 394.62901306 C-234.27759922 388.50435929 -234.27637545 382.3797695 -234.2705839 376.25511485 C-234.2660651 371.26919421 -234.26545548 366.28328729 -234.26763153 361.29736519 C-234.267938 360.58734968 -234.26824446 359.87733418 -234.26856022 359.14580305 C-234.2691997 357.70317208 -234.26984813 356.26054111 -234.2705054 354.81791014 C-234.27621316 341.27736009 -234.26964704 327.73683707 -234.25890467 314.19629145 C-234.24999765 302.61188574 -234.25149671 291.02752019 -234.26074219 279.44311523 C-234.271487 265.97390427 -234.27563341 252.50471715 -234.26951766 239.03550249 C-234.26888063 237.59362543 -234.26825188 236.15174836 -234.26763153 234.70987129 C-234.26732298 234.00058432 -234.26701443 233.29129736 -234.26669653 232.56051685 C-234.26498 227.59605806 -234.26786265 222.63161455 -234.27259064 217.66715813 C-234.27884358 210.95389047 -234.27428081 204.2407092 -234.26280212 197.52744484 C-234.26017925 195.07627359 -234.26087951 192.62509593 -234.26532745 190.17392731 C-234.33845162 145.74354768 -225.37721915 107.14115273 -200 70 C-199.30132812 68.89269531 -198.60265625 67.78539063 -197.8828125 66.64453125 C-197.26148438 65.77183594 -196.64015625 64.89914063 -196 64 C-195.34 64 -194.68 64 -194 64 C-193.73703125 63.41863281 -193.4740625 62.83726563 -193.203125 62.23828125 C-191.94085206 59.88996178 -190.53551439 58.16202155 -188.75 56.1875 C-186.46494652 53.64331674 -184.2339463 51.07893056 -182.0625 48.4375 C-178.70584367 44.53746849 -174.97142501 41.26201575 -171 38 C-170.49936035 37.5870166 -169.9987207 37.1740332 -169.48291016 36.74853516 C-147.82313965 18.98380767 -121.43967473 5.25278448 -94 -1 C-92.89229248 -1.27070312 -92.89229248 -1.27070312 -91.76220703 -1.546875 C-62.63207633 -8.43249583 -28.83616364 -7.74937957 0 0 Z """;

  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint =
        Paint()
          ..color = Colors.white70
          ..style = PaintingStyle.stroke
          ..strokeWidth = 4.0
          ..strokeCap = StrokeCap.round;

    final Path fullPath = parseSvgPathData(_svgPathData);
    final Matrix4 matrix4 = Matrix4.identity();
    matrix4.scale(size.width / 400, size.height / 400); // Adjust scale for logo
    final Path scaledPath = fullPath.transform(matrix4.storage);

    final PathMetric pathMetric = scaledPath.computeMetrics().first;
    final Path animatedPath = pathMetric.extractPath(
      0.0,
      pathMetric.length * animation.value,
    );

    // Center the path
    final bounds = scaledPath.getBounds();
    final dx = (size.width - bounds.width) / 2 - bounds.left;
    final dy = (size.height - bounds.height) / 2 - bounds.top;
    canvas.translate(dx, dy);

    canvas.drawPath(animatedPath, paint);
  }

  @override
  bool shouldRepaint(covariant RoambotLogoPainter oldDelegate) {
    return oldDelegate.animation != animation;
  }
}
