import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:path_drawing/path_drawing.dart';
import 'package:roambot/screens/landing_screen.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  bool showFullLogo = false;
  bool showVector = true;

  @override
  void initState() {
    super.initState();

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
    )..addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        setState(() {
          showVector = false; // Hide vector path after drawing
          showFullLogo = true; // Show logo
        });
      }
    });

    _controller.forward();

    Future.delayed(const Duration(seconds: 5), () {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (_) => const LandingScreen()),
      );
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.teal,
      body: Center(
        child: SizedBox(
          width: 300,
          height: 269,
          child: Stack(
            alignment: Alignment.center,
            children: [
              // Show shimmer path only while drawing
              if (showVector)
                AnimatedBuilder(
                  animation: _controller,
                  builder: (context, child) {
                    return ShaderMask(
                      shaderCallback: (bounds) {
                        return LinearGradient(
                          colors: [
                            Colors.white,
                            Colors.tealAccent,
                            Colors.white,
                          ],
                          stops: [
                            (_controller.value - 0.3).clamp(0.0, 1.0),
                            _controller.value,
                            (_controller.value + 0.3).clamp(0.0, 1.0),
                          ],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ).createShader(bounds);
                      },
                      child: CustomPaint(
                        size: const Size(200, 200),
                        painter: RoambotLogoPainter(_controller),
                      ),
                      blendMode: BlendMode.srcIn,
                    );
                  },
                ),

              // Fade-in original full-color logo
              AnimatedOpacity(
                opacity: showFullLogo ? 1.0 : 0.0,
                duration: const Duration(milliseconds: 600),
                child: Image.asset(
                  'assets/roambot_splash.png',
                  width: 400,
                  height: 270,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class RoambotLogoPainter extends CustomPainter {
  final Animation<double> animation;

  RoambotLogoPainter(this.animation) : super(repaint: animation);

  final String _svgPathData = """
 M0 0 C0.763125 0.42539063 1.52625 0.85078125 2.3125 1.2890625 C14.4627657 8.25988802 24.9129238 17.36691317 35 27 C35.80308594 27.76183594 36.60617187 28.52367187 37.43359375 29.30859375 C70.41148006 61.37201527 88.31329378 107.00843903 89.28540039 152.5612793 C89.47047237 173.0575845 87.31949192 193.45403377 81 213 C80.58041016 214.30614258 80.58041016 214.30614258 80.15234375 215.63867188 C74.47839503 232.94298734 67.1060029 249.46167832 56 264 C55.30261719 264.96035156 54.60523438 265.92070312 53.88671875 266.91015625 C37.9053992 288.7430125 17.98051706 305.87204061 -5 320 C-5.61359375 320.39058594 -6.2271875 320.78117187 -6.859375 321.18359375 C-11.8863463 324.25962143 -18.97693764 328 -25 328 C-20.08647806 334.96082275 -14.41325168 341.09607209 -8.59667969 347.29443359 C-6.04924015 350.0155976 -3.52538797 352.75838735 -1 355.5 C2.05486182 358.81206584 5.11201923 362.12194483 8.17578125 365.42578125 C9.22154342 366.55451218 10.26711879 367.68341622 11.3125 368.8125 C11.81894043 369.35946533 12.32538086 369.90643066 12.84716797 370.4699707 C15.49090636 373.33438477 18.08783765 376.22846756 20.625 379.1875 C24.07655826 383.18625652 27.83672504 386.84900698 31.58984375 390.5625 C34.25800304 393.26093014 36.75517476 396.06001568 39.2265625 398.9375 C44.67060784 405.26890074 50.27013906 411.40527851 56.2734375 417.2109375 C61 422.10859729 61 422.10859729 61 425 C61.59296875 425.2578125 62.1859375 425.515625 62.796875 425.78125 C65.17660965 427.09769895 66.50978792 428.42580782 68.25 430.5 C68.77078125 431.1084375 69.2915625 431.716875 69.828125 432.34375 C71 434 71 434 71 436 C71.99 436.33 72.98 436.66 74 437 C75.86985013 439.52429767 76.00424855 440.89591064 75.875 444.0625 C75 447 75 447 73.4375 448.75 C66.63298436 452.2394952 59.61305027 452.29678013 52.140625 452.265625 C51.11499451 452.26753845 50.08936401 452.2694519 49.03265381 452.27142334 C46.87105055 452.27277868 44.70943898 452.26912793 42.54785156 452.26074219 C39.27389801 452.25007784 36.00049867 452.26063715 32.7265625 452.2734375 C10.19276258 452.29010586 -8.63261191 449.29136708 -25.39990234 432.91674805 C-30.22620017 428.07962321 -34.89337602 423.13057763 -39.3046875 417.91015625 C-41.39273546 415.55749392 -43.62517047 413.38572793 -45.875 411.1875 C-58.89894326 398.30317022 -58.89894326 398.30317022 -61 392 C-62.31992961 391.30717388 -63.65496779 390.64273679 -65 390 C-66.4296875 388.58203125 -66.4296875 388.58203125 -67.875 386.8125 C-71.45159863 382.57786915 -75.203989 378.53668028 -79 374.5 C-82.64766362 370.61492011 -86.28516624 366.73805566 -89.75 362.6875 C-93.15601173 358.72242068 -96.88395975 355.10429246 -100.59765625 351.4296875 C-103.22593676 348.7714916 -105.67691713 346.01175433 -108.109375 343.17578125 C-110.42344121 340.51269265 -112.800592 337.91007913 -115.1875 335.3125 C-115.8829895 334.55525635 -115.8829895 334.55525635 -116.5925293 333.78271484 C-119.09926396 331.05716873 -121.61233293 328.33755623 -124.12890625 325.62109375 C-125.16935832 324.49747684 -126.20972361 323.37377957 -127.25 322.25 C-127.75772949 321.70174561 -128.26545898 321.15349121 -128.78857422 320.58862305 C-132.06511867 317.04073472 -135.25933186 313.43322271 -138.40625 309.76953125 C-140.12898725 307.85678621 -141.95302787 306.09195387 -143.8125 304.3125 C-146.50405762 301.69271725 -147.68656053 299.53618318 -149 296 C-149.60972656 295.69707031 -150.21945313 295.39414062 -150.84765625 295.08203125 C-153.26945181 293.86454056 -154.51627058 292.56646536 -156.25 290.5 C-156.77078125 289.8915625 -157.2915625 289.283125 -157.828125 288.65625 C-159 287 -159 287 -159 285 C-159.99 284.67 -160.98 284.34 -162 284 C-163.73288865 281.57395589 -164.03471923 280.36455188 -163.75 277.375 C-163 275 -163 275 -161 273 C-158.42477852 272.80338853 -155.95568049 272.73040306 -153.37939453 272.74462891 C-152.59192841 272.74100845 -151.80446228 272.737388 -150.99313354 272.73365784 C-149.27656337 272.7267498 -147.55997116 272.72426102 -145.8433876 272.72560501 C-143.10718366 272.72657155 -140.37137135 272.71360439 -137.63522339 272.69662476 C-129.85271435 272.65045007 -122.07023883 272.62583713 -114.28759766 272.61914062 C-109.5258732 272.61405597 -104.76454529 272.58944083 -100.00295639 272.55381393 C-98.20530482 272.54415399 -96.40759761 272.54160655 -94.60992813 272.54698563 C-77.06674246 272.59691524 -60.08388098 270.33686566 -44 263 C-42.27716797 262.22849609 -42.27716797 262.22849609 -40.51953125 261.44140625 C-23.29971856 253.31034966 -7.97272979 240.3475498 2 224 C2.99966797 222.39705078 2.99966797 222.39705078 4.01953125 220.76171875 C8.84800942 212.80754824 12.16348744 204.88334165 15 196 C15.34289062 195.02160156 15.68578125 194.04320312 16.0390625 193.03515625 C20.74007695 178.18683011 26.14883018 156.94470637 18.70703125 142.48828125 C15.98917981 137.70234747 13.55942122 134.20391762 9 131 C6.35137554 128.40786279 6.00818162 127.19237286 5.84765625 123.41796875 C5.91191527 122.00745818 5.98395899 120.59728743 6.0625 119.1875 C6.38828246 106.18836051 3.57892058 95.08488494 -5 85 C-5.70511719 84.16984375 -6.41023438 83.3396875 -7.13671875 82.484375 C-9.37452991 79.93803491 -11.670877 77.4628902 -14 75 C-14.721875 74.21367187 -15.44375 73.42734375 -16.1875 72.6171875 C-33.51943136 54.35675981 -58.01885481 46.4317525 -82.5625 45.7265625 C-109.01818176 44.6883578 -109.01818176 44.6883578 -132 56 C-136.96242221 59.54151976 -141.32739332 60.60246141 -147.3125 61.25 C-157.46001804 62.65299917 -165.92511554 66.40374524 -175 71 C-176.12535156 71.53496094 -177.25070313 72.06992188 -178.41015625 72.62109375 C-196.77172009 82.12172227 -206.1718209 103.19289134 -212.37109375 121.98095703 C-215.89596534 133.29721793 -218.15525163 144.50353893 -218.13803101 156.37121582 C-218.14226293 157.57735039 -218.14226293 157.57735039 -218.14658034 158.80785131 C-218.15486282 161.48193692 -218.15625912 164.15598078 -218.15771484 166.83007812 C-218.16238789 168.75601313 -218.16753225 170.68194704 -218.17311096 172.60787964 C-218.18436112 176.74711503 -218.19281025 180.88634334 -218.19923019 185.02558899 C-218.20995201 191.58361454 -218.23020918 198.14158926 -218.25234985 204.69958496 C-218.31412972 223.34559795 -218.3682123 241.99160779 -218.40136719 260.63769531 C-218.41976991 270.94232022 -218.44877658 281.24685965 -218.4893719 291.55142164 C-218.51034754 296.99565216 -218.52588571 302.43977542 -218.52817917 307.88404846 C-218.53034223 313.01250891 -218.54637887 318.14074609 -218.57256889 323.26913834 C-218.57970068 325.13942861 -218.58189303 327.00974611 -218.57846642 328.88004684 C-218.55008891 347.33152673 -219.80249768 366.13124458 -232.20703125 380.86328125 C-234.01724829 382.95610366 -234.01724829 382.95610366 -235.51171875 385.16796875 C-244.51563485 397.98210627 -259.29102029 407.09700676 -274 412 C-276.72331488 412.23188622 -279.25039269 412.13093368 -282 412 C-284.44179384 409.55820616 -284.25088203 408.94651743 -284.25447559 405.59866714 C-284.26030779 404.66773562 -284.26613998 403.73680409 -284.27214891 402.77766252 C-284.26836958 401.74793879 -284.26459026 400.71821507 -284.26069641 399.6572876 C-284.26643473 398.02416929 -284.26643473 398.02416929 -284.27228898 396.35805869 C-284.28266456 392.68429567 -284.27861797 389.01068763 -284.2746582 385.33691406 C-284.27900263 382.71224827 -284.28418487 380.08758376 -284.29014587 377.46292114 C-284.30292679 371.05358296 -284.30468169 364.6442866 -284.30234561 358.23493782 C-284.30056308 353.01587086 -284.30231076 347.7968166 -284.30657005 342.57775116 C-284.30716524 341.83502651 -284.30776043 341.09230186 -284.30837366 340.3270704 C-284.30958546 338.81800955 -284.31079959 337.30894871 -284.31201603 335.79988787 C-284.32290833 321.62499108 -284.32072337 307.45011803 -284.31463119 293.27521989 C-284.30948228 280.35065976 -284.32066059 267.42617547 -284.33972941 254.50163034 C-284.35918747 241.2102478 -284.36734854 227.91890096 -284.36360615 214.62750411 C-284.36170333 207.17425407 -284.36408943 199.72106824 -284.37832069 192.2678299 C-284.39033872 185.90923941 -284.39152587 179.55075245 -284.37953053 173.19216028 C-284.37370865 169.95701847 -284.37403125 166.72210052 -284.38453293 163.48696518 C-284.45332948 140.6222662 -282.39444374 119.69691621 -275 98 C-274.78005371 97.32340332 -274.56010742 96.64680664 -274.33349609 95.94970703 C-268.79024955 78.94444338 -260.33691225 61.87217111 -249 48 C-248.36835938 47.16984375 -247.73671875 46.3396875 -247.0859375 45.484375 C-242.2034644 39.1429956 -236.73572214 33.56729963 -231 28 C-228.64098353 25.66262589 -226.30093659 23.3224748 -224.03515625 20.89453125 C-215.34809732 11.7258136 -204.98407294 5.03486803 -194.1875 -1.375 C-193.506875 -1.77968506 -192.82625 -2.18437012 -192.125 -2.60131836 C-187.23054048 -5.44202196 -182.20828424 -7.79409651 -177 -10 C-175.27136719 -10.73863281 -175.27136719 -10.73863281 -173.5078125 -11.4921875 C-116.27833396 -34.88622376 -53.60960379 -30.94377866 0 0 Z
  """;

  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint =
        Paint()
          ..color = Colors.white
          ..style = PaintingStyle.stroke
          ..strokeWidth = 4.0
          ..strokeCap = StrokeCap.round;

    final Path fullPath = parseSvgPathData(_svgPathData);
    final Matrix4 matrix4 = Matrix4.identity();
    matrix4.scale(size.width / 400, size.height / 400); // Adjust scale for logo
    final Path scaledPath = fullPath.transform(matrix4.storage);

    final PathMetric pathMetric = scaledPath.computeMetrics().first;
    final Path animatedPath = pathMetric.extractPath(
      0.0,
      pathMetric.length * animation.value,
    );

    // Center the path
    final bounds = scaledPath.getBounds();
    final dx = (size.width - bounds.width) / 2 - bounds.left;
    final dy = (size.height - bounds.height) / 2 - bounds.top;
    canvas.translate(dx, dy);

    canvas.drawPath(animatedPath, paint);
  }

  @override
  bool shouldRepaint(covariant RoambotLogoPainter oldDelegate) {
    return oldDelegate.animation != animation;
  }
}
